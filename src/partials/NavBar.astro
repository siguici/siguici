---
import Icon from '../components/Icon.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import type { iconPaths } from '../components/IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Work', href: '/work/' },
	{ label: 'About', href: '/about/' },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'Twitter', href: 'https://twitter.com/siguici', icon: 'twitter-logo' },
	{ label: 'GitHub', href: 'https://github.com/siguici', icon: 'github-logo' },
	{ label: 'CodePen', href: 'https://codepen.io/siguici', icon: 'codepen-logo' },
	{ label: 'YouTube', href: 'https://www.youtube.com/@siguici/', icon: 'youtube-logo' },
];
---

<nav>
	<div class="menu-header">
		<a href="/" class="site-title">
			<Icon icon="terminal-window" color="var(--accent-regular)" size="1.6em" gradient />
			{process.env.APP_NAME || 'Sigui'}
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
					<Icon icon="list" />
				</button>
			</template>
		</menu-button>
	</div>
	<div id="menu-content">
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>

			<div class="rss-feed">
				<a href="/feed.xml" class="rss-link font-black ">
					<span class="sr-only">RSS feed</span>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						style="fill: currentColor;transform: ;msFilter:;"
						><path d="M19 20.001C19 11.729 12.271 5 4 5v2c7.168 0 13 5.832 13 13.001h2z"></path><path
							d="M12 20.001h2C14 14.486 9.514 10 4 10v2c4.411 0 8 3.589 8 8.001z"></path><circle cx="6" cy="18" r="2"
						></circle>
					</svg>
				</a>
			</div>

			<div class="theme-toggle">
				<ThemeToggle transition:persist />
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

<style>
	nav {
		@apply relative z-[9999] font-medium mb-14;
		font-family: var(--font-brand);

		@media (min-width: 50em) {
			& {
				@apply grid items-center py-10 px-20 gap-4;
				grid-template-columns: 1fr auto 1fr;
			}
		}
	}

	.menu-header {
		@apply flex justify-between gap-2 p-6;

		@media (min-width: 50em) {
			& {
				@apply p-0;
			}
		}
	}

	.site-title {
		@apply flex gap-2 items-center leading-relaxed no-underline;
		color: var(--gray-0);

		@media (min-width: 50em) {
			& {
				@apply text-xl;
			}
		}
	}

	.menu-button {
		@apply relative flex border-0 rounded-full p-2 text-sm;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);

		&[aria-expanded='true'] {
			color: var(--gray-0);
			background: linear-gradient(180deg, var(--gray-600), transparent),
				radial-gradient(var(--gray-900), var(--gray-800) 150%);
		}

		&[hidden] {
			@apply hidden;
		}

		&::before {
			@apply absolute -inset-[1px] content-[''] -z-[1] rounded-full;
			background: var(--gradient-stroke);
		}
	}

	#menu-content {
		@apply absolute left-0 right-0;

		@media (min-width: 50em) {
			& {
				@apply contents;
			}
		}
	}

	.nav-items {
		@apply flex flex-col gap-4 m-0 text-sm list-none p-8;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);

		@media (min-width: 50em) {
			& {
				@apply relative flex-row text-sm rounded-full border-0 py-2 px-3;
				background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
				box-shadow: var(--shadow-md);

				&::before {
					@apply absolute -inset-[1px] content-[''] -z-[1] rounded-full;
					background: var(--gradient-stroke);
				}
			}
		}
	}

	.link {
		@apply inline-block no-underline;
		color: var(--gray-300);

		&.active {
			color: var(--gray-0);
		}

		@media (min-width: 50em) {
			& {
				@apply py-2 px-4 rounded-full;
				transition: color var(--theme-transition), background-color var(--theme-transition);

				&:hover,
				&:focus {
					@apply text-black dark:text-white;
					background-color: var(--accent-subtle-overlay);
				}

				&.active {
					color: var(--accent-text-over);
					background-color: var(--accent-regular);
				}

				@media (forced-colors: active) {
					&.active {
						color: SelectedItem;
					}
				}
			}
		}
	}

	.menu-footer {
		--icon-size: theme('fontSize.2xl');
		--icon-padding: theme('spacing.1');

		@apply flex justify-between gap-3 py-6 pr-8 pl-6;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);

		@media (min-width: 50em) {
			& {
				--icon-padding: theme('spacing.2');
				@apply self-end items-center p-0 bg-transparent shadow-none;
			}
		}
	}

	.socials, .rss-feed {
		@apply flex flex-wrap gap-3;
		font-size: var(--icon-size);
	}

	.socials {
		@media (min-width: 50em) {
			& {
				@apply hidden;

				@media (min-width: 60em) {
					& {
						@apply flex justify-end gap-0 w-full;
					}
				}
			}
		}
	}

	.social, .rss-link {
		@apply flex no-underline;
		padding: var(--icon-padding);
		color: var(--accent-dark);
		transition: color var(--theme-transition);

		&:hover,
		&:focus {
			color: var(--accent-text-over);
		}
	}

	.theme-toggle {
		@apply flex items-center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}
</style>
